#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun  3 22:47:21 2014 by generateDS.py version 2.12d.
#
# Command line options:
#   ('-o', 'gpx10.py')
#   ('-s', 'gpssubs10.py')
#
# Command line arguments:
#   schemas/gpx.1.0.xsd
#
# Command line:
#   venv/bin/generateDS.py -o "gpx10.py" -s "gpssubs10.py" schemas/gpx.1.0.xsd
#
# Current working directory (os.getcwd()):
#   mineturer2
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class gpx(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, creator=None, name=None, desc=None, author=None, email=None, url=None, urlname=None, time=None, keywords=None, bounds=None, wpt=None, rte=None, trk=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        self.creator = _cast(None, creator)
        self.name = name
        self.desc = desc
        self.author = author
        self.email = email
        self.url = url
        self.urlname = urlname
        if isinstance(time, basestring):
            initvalue_ = datetime_.datetime.strptime(time, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = time
        self.time = initvalue_
        self.keywords = keywords
        self.bounds = bounds
        if wpt is None:
            self.wpt = []
        else:
            self.wpt = wpt
        if rte is None:
            self.rte = []
        else:
            self.rte = rte
        if trk is None:
            self.trk = []
        else:
            self.trk = trk
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if gpx.subclass:
            return gpx.subclass(*args_, **kwargs_)
        else:
            return gpx(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_author(self): return self.author
    def set_author(self, author): self.author = author
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_keywords(self): return self.keywords
    def set_keywords(self, keywords): self.keywords = keywords
    def get_bounds(self): return self.bounds
    def set_bounds(self, bounds): self.bounds = bounds
    def get_wpt(self): return self.wpt
    def set_wpt(self, wpt): self.wpt = wpt
    def add_wpt(self, value): self.wpt.append(value)
    def insert_wpt(self, index, value): self.wpt[index] = value
    def get_rte(self): return self.rte
    def set_rte(self, rte): self.rte = rte
    def add_rte(self, value): self.rte.append(value)
    def insert_rte(self, index, value): self.rte[index] = value
    def get_trk(self): return self.trk
    def set_trk(self, trk): self.trk = trk
    def add_trk(self, value): self.trk.append(value)
    def insert_trk(self, index, value): self.trk[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_creator(self): return self.creator
    def set_creator(self, creator): self.creator = creator
    def validate_emailType(self, value):
        # Validate type emailType, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.name is not None or
            self.desc is not None or
            self.author is not None or
            self.email is not None or
            self.url is not None or
            self.urlname is not None or
            self.time is not None or
            self.keywords is not None or
            self.bounds is not None or
            self.wpt or
            self.rte or
            self.trk or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='gpx', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='gpx')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='gpx', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='gpx'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.creator is not None and 'creator' not in already_processed:
            already_processed.add('creator')
            outfile.write(' creator=%s' % (self.gds_format_string(quote_attrib(self.creator).encode(ExternalEncoding), input_name='creator'), ))
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='gpx', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.author is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sauthor>%s</%sauthor>%s' % (namespace_, self.gds_format_string(quote_xml(self.author).encode(ExternalEncoding), input_name='author'), namespace_, eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespace_, self.gds_format_string(quote_xml(self.email).encode(ExternalEncoding), input_name='email'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stime>%s</%stime>%s' % (namespace_, self.gds_format_datetime(self.time, input_name='time'), namespace_, eol_))
        if self.keywords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skeywords>%s</%skeywords>%s' % (namespace_, self.gds_format_string(quote_xml(self.keywords).encode(ExternalEncoding), input_name='keywords'), namespace_, eol_))
        if self.bounds is not None:
            self.bounds.export(outfile, level, namespace_, name_='bounds', pretty_print=pretty_print)
        for wpt_ in self.wpt:
            wpt_.export(outfile, level, namespace_, name_='wpt', pretty_print=pretty_print)
        for rte_ in self.rte:
            rte_.export(outfile, level, namespace_, name_='rte', pretty_print=pretty_print)
        for trk_ in self.trk:
            trk_.export(outfile, level, namespace_, name_='trk', pretty_print=pretty_print)
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='gpx'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
        if self.creator is not None and 'creator' not in already_processed:
            already_processed.add('creator')
            showIndent(outfile, level)
            outfile.write('creator="%s",\n' % (self.creator,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.author is not None:
            showIndent(outfile, level)
            outfile.write('author=%s,\n' % quote_python(self.author).encode(ExternalEncoding))
        if self.email is not None:
            showIndent(outfile, level)
            outfile.write('email=%s,\n' % quote_python(self.email).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.time, input_name='time'))
        if self.keywords is not None:
            showIndent(outfile, level)
            outfile.write('keywords=%s,\n' % quote_python(self.keywords).encode(ExternalEncoding))
        if self.bounds is not None:
            showIndent(outfile, level)
            outfile.write('bounds=model_.boundsType(\n')
            self.bounds.exportLiteral(outfile, level, name_='bounds')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('wpt=[\n')
        level += 1
        for wpt_ in self.wpt:
            showIndent(outfile, level)
            outfile.write('model_.wptType(\n')
            wpt_.exportLiteral(outfile, level, name_='wptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('rte=[\n')
        level += 1
        for rte_ in self.rte:
            showIndent(outfile, level)
            outfile.write('model_.rteType(\n')
            rte_.exportLiteral(outfile, level, name_='rteType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('trk=[\n')
        level += 1
        for trk_ in self.trk:
            showIndent(outfile, level)
            outfile.write('model_.trkType(\n')
            trk_.exportLiteral(outfile, level, name_='trkType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
        value = find_attr_value_('creator', node)
        if value is not None and 'creator' not in already_processed:
            already_processed.add('creator')
            self.creator = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'author':
            author_ = child_.text
            author_ = self.gds_validate_string(author_, node, 'author')
            self.author = author_
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
            self.validate_emailType(self.email)    # validate type emailType
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'time':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.time = dval_
        elif nodeName_ == 'keywords':
            keywords_ = child_.text
            keywords_ = self.gds_validate_string(keywords_, node, 'keywords')
            self.keywords = keywords_
        elif nodeName_ == 'bounds':
            obj_ = boundsType.factory()
            obj_.build(child_)
            self.bounds = obj_
            obj_.original_tagname_ = 'bounds'
        elif nodeName_ == 'wpt':
            obj_ = wptType.factory()
            obj_.build(child_)
            self.wpt.append(obj_)
            obj_.original_tagname_ = 'wpt'
        elif nodeName_ == 'rte':
            obj_ = rteType.factory()
            obj_.build(child_)
            self.rte.append(obj_)
            obj_.original_tagname_ = 'rte'
        elif nodeName_ == 'trk':
            obj_ = trkType.factory()
            obj_.build(child_)
            self.trk.append(obj_)
            obj_.original_tagname_ = 'trk'
        else:
            obj_ = self.gds_build_any(child_, 'gpx')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class gpx


class boundsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, minlat=None, maxlon=None, minlon=None, maxlat=None):
        self.original_tagname_ = None
        self.minlat = _cast(None, minlat)
        self.maxlon = _cast(None, maxlon)
        self.minlon = _cast(None, minlon)
        self.maxlat = _cast(None, maxlat)
    def factory(*args_, **kwargs_):
        if boundsType.subclass:
            return boundsType.subclass(*args_, **kwargs_)
        else:
            return boundsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_minlat(self): return self.minlat
    def set_minlat(self, minlat): self.minlat = minlat
    def get_maxlon(self): return self.maxlon
    def set_maxlon(self, maxlon): self.maxlon = maxlon
    def get_minlon(self): return self.minlon
    def set_minlon(self, minlon): self.minlon = minlon
    def get_maxlat(self): return self.maxlat
    def set_maxlat(self, maxlat): self.maxlat = maxlat
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='boundsType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='boundsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='boundsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='boundsType'):
        if self.minlat is not None and 'minlat' not in already_processed:
            already_processed.add('minlat')
            outfile.write(' minlat=%s' % (quote_attrib(self.minlat), ))
        if self.maxlon is not None and 'maxlon' not in already_processed:
            already_processed.add('maxlon')
            outfile.write(' maxlon=%s' % (quote_attrib(self.maxlon), ))
        if self.minlon is not None and 'minlon' not in already_processed:
            already_processed.add('minlon')
            outfile.write(' minlon=%s' % (quote_attrib(self.minlon), ))
        if self.maxlat is not None and 'maxlat' not in already_processed:
            already_processed.add('maxlat')
            outfile.write(' maxlat=%s' % (quote_attrib(self.maxlat), ))
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='boundsType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='boundsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.minlat is not None and 'minlat' not in already_processed:
            already_processed.add('minlat')
            showIndent(outfile, level)
            outfile.write('minlat=%s,\n' % (self.minlat,))
        if self.maxlon is not None and 'maxlon' not in already_processed:
            already_processed.add('maxlon')
            showIndent(outfile, level)
            outfile.write('maxlon=%s,\n' % (self.maxlon,))
        if self.minlon is not None and 'minlon' not in already_processed:
            already_processed.add('minlon')
            showIndent(outfile, level)
            outfile.write('minlon=%s,\n' % (self.minlon,))
        if self.maxlat is not None and 'maxlat' not in already_processed:
            already_processed.add('maxlat')
            showIndent(outfile, level)
            outfile.write('maxlat=%s,\n' % (self.maxlat,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minlat', node)
        if value is not None and 'minlat' not in already_processed:
            already_processed.add('minlat')
            self.minlat = value
        value = find_attr_value_('maxlon', node)
        if value is not None and 'maxlon' not in already_processed:
            already_processed.add('maxlon')
            self.maxlon = value
        value = find_attr_value_('minlon', node)
        if value is not None and 'minlon' not in already_processed:
            already_processed.add('minlon')
            self.minlon = value
        value = find_attr_value_('maxlat', node)
        if value is not None and 'maxlat' not in already_processed:
            already_processed.add('maxlat')
            self.maxlat = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class boundsType


class wptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lat=None, lon=None, ele=None, time=None, magvar=None, geoidheight=None, name=None, cmt=None, desc=None, src=None, url=None, urlname=None, sym=None, type_=None, fix=None, sat=None, hdop=None, vdop=None, pdop=None, ageofdgpsdata=None, dgpsid=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.lat = _cast(None, lat)
        self.lon = _cast(None, lon)
        self.ele = ele
        if isinstance(time, basestring):
            initvalue_ = datetime_.datetime.strptime(time, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = time
        self.time = initvalue_
        self.magvar = magvar
        self.geoidheight = geoidheight
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        self.url = url
        self.urlname = urlname
        self.sym = sym
        self.type_ = type_
        self.fix = fix
        self.sat = sat
        self.hdop = hdop
        self.vdop = vdop
        self.pdop = pdop
        self.ageofdgpsdata = ageofdgpsdata
        self.dgpsid = dgpsid
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if wptType.subclass:
            return wptType.subclass(*args_, **kwargs_)
        else:
            return wptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ele(self): return self.ele
    def set_ele(self, ele): self.ele = ele
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_magvar(self): return self.magvar
    def set_magvar(self, magvar): self.magvar = magvar
    def get_geoidheight(self): return self.geoidheight
    def set_geoidheight(self, geoidheight): self.geoidheight = geoidheight
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_sym(self): return self.sym
    def set_sym(self, sym): self.sym = sym
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_fix(self): return self.fix
    def set_fix(self, fix): self.fix = fix
    def get_sat(self): return self.sat
    def set_sat(self, sat): self.sat = sat
    def get_hdop(self): return self.hdop
    def set_hdop(self, hdop): self.hdop = hdop
    def get_vdop(self): return self.vdop
    def set_vdop(self, vdop): self.vdop = vdop
    def get_pdop(self): return self.pdop
    def set_pdop(self, pdop): self.pdop = pdop
    def get_ageofdgpsdata(self): return self.ageofdgpsdata
    def set_ageofdgpsdata(self, ageofdgpsdata): self.ageofdgpsdata = ageofdgpsdata
    def get_dgpsid(self): return self.dgpsid
    def set_dgpsid(self, dgpsid): self.dgpsid = dgpsid
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_lat(self): return self.lat
    def set_lat(self, lat): self.lat = lat
    def get_lon(self): return self.lon
    def set_lon(self, lon): self.lon = lon
    def validate_degreesType(self, value):
        # Validate type degreesType, a restriction on xsd:decimal.
        pass
    def validate_fixType(self, value):
        # Validate type fixType, a restriction on xsd:string.
        pass
    def validate_dgpsStationType(self, value):
        # Validate type dgpsStationType, a restriction on xsd:integer.
        pass
    def hasContent_(self):
        if (
            self.ele is not None or
            self.time is not None or
            self.magvar is not None or
            self.geoidheight is not None or
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.url is not None or
            self.urlname is not None or
            self.sym is not None or
            self.type_ is not None or
            self.fix is not None or
            self.sat is not None or
            self.hdop is not None or
            self.vdop is not None or
            self.pdop is not None or
            self.ageofdgpsdata is not None or
            self.dgpsid is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='wptType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='wptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='wptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='wptType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            outfile.write(' lat=%s' % (quote_attrib(self.lat), ))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            outfile.write(' lon=%s' % (quote_attrib(self.lon), ))
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='wptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ele is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sele>%s</%sele>%s' % (namespace_, self.gds_format_float(self.ele, input_name='ele'), namespace_, eol_))
        if self.time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stime>%s</%stime>%s' % (namespace_, self.gds_format_datetime(self.time, input_name='time'), namespace_, eol_))
        if self.magvar is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smagvar>%s</%smagvar>%s' % (namespace_, self.gds_format_float(self.magvar, input_name='magvar'), namespace_, eol_))
        if self.geoidheight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoidheight>%s</%sgeoidheight>%s' % (namespace_, self.gds_format_float(self.geoidheight, input_name='geoidheight'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.cmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scmt>%s</%scmt>%s' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.src is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssrc>%s</%ssrc>%s' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.sym is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssym>%s</%ssym>%s' % (namespace_, self.gds_format_string(quote_xml(self.sym).encode(ExternalEncoding), input_name='sym'), namespace_, eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.fix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfix>%s</%sfix>%s' % (namespace_, self.gds_format_string(quote_xml(self.fix).encode(ExternalEncoding), input_name='fix'), namespace_, eol_))
        if self.sat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssat>%s</%ssat>%s' % (namespace_, self.gds_format_integer(self.sat, input_name='sat'), namespace_, eol_))
        if self.hdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shdop>%s</%shdop>%s' % (namespace_, self.gds_format_float(self.hdop, input_name='hdop'), namespace_, eol_))
        if self.vdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svdop>%s</%svdop>%s' % (namespace_, self.gds_format_float(self.vdop, input_name='vdop'), namespace_, eol_))
        if self.pdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdop>%s</%spdop>%s' % (namespace_, self.gds_format_float(self.pdop, input_name='pdop'), namespace_, eol_))
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sageofdgpsdata>%s</%sageofdgpsdata>%s' % (namespace_, self.gds_format_float(self.ageofdgpsdata, input_name='ageofdgpsdata'), namespace_, eol_))
        if self.dgpsid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdgpsid>%s</%sdgpsid>%s' % (namespace_, self.gds_format_integer(self.dgpsid, input_name='dgpsid'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='wptType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            showIndent(outfile, level)
            outfile.write('lat=%s,\n' % (self.lat,))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            showIndent(outfile, level)
            outfile.write('lon=%s,\n' % (self.lon,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('ele=%f,\n' % self.ele)
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.time, input_name='time'))
        if self.magvar is not None:
            showIndent(outfile, level)
            outfile.write('magvar=%f,\n' % self.magvar)
        if self.geoidheight is not None:
            showIndent(outfile, level)
            outfile.write('geoidheight=%f,\n' % self.geoidheight)
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.sym is not None:
            showIndent(outfile, level)
            outfile.write('sym=%s,\n' % quote_python(self.sym).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.fix is not None:
            showIndent(outfile, level)
            outfile.write('fix=%s,\n' % quote_python(self.fix).encode(ExternalEncoding))
        if self.sat is not None:
            showIndent(outfile, level)
            outfile.write('sat=%d,\n' % self.sat)
        if self.hdop is not None:
            showIndent(outfile, level)
            outfile.write('hdop=%f,\n' % self.hdop)
        if self.vdop is not None:
            showIndent(outfile, level)
            outfile.write('vdop=%f,\n' % self.vdop)
        if self.pdop is not None:
            showIndent(outfile, level)
            outfile.write('pdop=%f,\n' % self.pdop)
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level)
            outfile.write('ageofdgpsdata=%f,\n' % self.ageofdgpsdata)
        if self.dgpsid is not None:
            showIndent(outfile, level)
            outfile.write('dgpsid=%d,\n' % self.dgpsid)
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            self.lat = value
        value = find_attr_value_('lon', node)
        if value is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            self.lon = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ele':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ele')
            self.ele = fval_
        elif nodeName_ == 'time':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.time = dval_
        elif nodeName_ == 'magvar':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'magvar')
            self.magvar = fval_
            self.validate_degreesType(self.magvar)    # validate type degreesType
        elif nodeName_ == 'geoidheight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'geoidheight')
            self.geoidheight = fval_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'sym':
            sym_ = child_.text
            sym_ = self.gds_validate_string(sym_, node, 'sym')
            self.sym = sym_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'fix':
            fix_ = child_.text
            fix_ = self.gds_validate_string(fix_, node, 'fix')
            self.fix = fix_
            self.validate_fixType(self.fix)    # validate type fixType
        elif nodeName_ == 'sat':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'sat')
            self.sat = ival_
        elif nodeName_ == 'hdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'hdop')
            self.hdop = fval_
        elif nodeName_ == 'vdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vdop')
            self.vdop = fval_
        elif nodeName_ == 'pdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'pdop')
            self.pdop = fval_
        elif nodeName_ == 'ageofdgpsdata':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ageofdgpsdata')
            self.ageofdgpsdata = fval_
        elif nodeName_ == 'dgpsid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'dgpsid')
            self.dgpsid = ival_
            self.validate_dgpsStationType(self.dgpsid)    # validate type dgpsStationType
        else:
            obj_ = self.gds_build_any(child_, 'wptType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class wptType


class rteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, cmt=None, desc=None, src=None, url=None, urlname=None, number=None, anytypeobjs_=None, rtept=None):
        self.original_tagname_ = None
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        self.url = url
        self.urlname = urlname
        self.number = number
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        if rtept is None:
            self.rtept = []
        else:
            self.rtept = rtept
    def factory(*args_, **kwargs_):
        if rteType.subclass:
            return rteType.subclass(*args_, **kwargs_)
        else:
            return rteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_rtept(self): return self.rtept
    def set_rtept(self, rtept): self.rtept = rtept
    def add_rtept(self, value): self.rtept.append(value)
    def insert_rtept(self, index, value): self.rtept[index] = value
    def hasContent_(self):
        if (
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.url is not None or
            self.urlname is not None or
            self.number is not None or
            self.anytypeobjs_ or
            self.rtept
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='rteType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rteType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='rteType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='rteType'):
        pass
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='rteType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.cmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scmt>%s</%scmt>%s' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.src is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssrc>%s</%ssrc>%s' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespace_, self.gds_format_integer(self.number, input_name='number'), namespace_, eol_))
        for rtept_ in self.rtept:
            rtept_.export(outfile, level, namespace_, name_='rtept', pretty_print=pretty_print)
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='rteType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%d,\n' % self.number)
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('rtept=[\n')
        level += 1
        for rtept_ in self.rtept:
            showIndent(outfile, level)
            outfile.write('model_.rteptType(\n')
            rtept_.exportLiteral(outfile, level, name_='rteptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'number':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'number')
            self.number = ival_
        elif nodeName_ == 'rtept':
            obj_ = rteptType.factory()
            obj_.build(child_)
            self.rtept.append(obj_)
            obj_.original_tagname_ = 'rtept'
        else:
            obj_ = self.gds_build_any(child_, 'rteType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class rteType


class rteptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lat=None, lon=None, ele=None, time=None, magvar=None, geoidheight=None, name=None, cmt=None, desc=None, src=None, url=None, urlname=None, sym=None, type_=None, fix=None, sat=None, hdop=None, vdop=None, pdop=None, ageofdgpsdata=None, dgpsid=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.lat = _cast(None, lat)
        self.lon = _cast(None, lon)
        self.ele = ele
        if isinstance(time, basestring):
            initvalue_ = datetime_.datetime.strptime(time, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = time
        self.time = initvalue_
        self.magvar = magvar
        self.geoidheight = geoidheight
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        self.url = url
        self.urlname = urlname
        self.sym = sym
        self.type_ = type_
        self.fix = fix
        self.sat = sat
        self.hdop = hdop
        self.vdop = vdop
        self.pdop = pdop
        self.ageofdgpsdata = ageofdgpsdata
        self.dgpsid = dgpsid
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if rteptType.subclass:
            return rteptType.subclass(*args_, **kwargs_)
        else:
            return rteptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ele(self): return self.ele
    def set_ele(self, ele): self.ele = ele
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_magvar(self): return self.magvar
    def set_magvar(self, magvar): self.magvar = magvar
    def get_geoidheight(self): return self.geoidheight
    def set_geoidheight(self, geoidheight): self.geoidheight = geoidheight
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_sym(self): return self.sym
    def set_sym(self, sym): self.sym = sym
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_fix(self): return self.fix
    def set_fix(self, fix): self.fix = fix
    def get_sat(self): return self.sat
    def set_sat(self, sat): self.sat = sat
    def get_hdop(self): return self.hdop
    def set_hdop(self, hdop): self.hdop = hdop
    def get_vdop(self): return self.vdop
    def set_vdop(self, vdop): self.vdop = vdop
    def get_pdop(self): return self.pdop
    def set_pdop(self, pdop): self.pdop = pdop
    def get_ageofdgpsdata(self): return self.ageofdgpsdata
    def set_ageofdgpsdata(self, ageofdgpsdata): self.ageofdgpsdata = ageofdgpsdata
    def get_dgpsid(self): return self.dgpsid
    def set_dgpsid(self, dgpsid): self.dgpsid = dgpsid
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_lat(self): return self.lat
    def set_lat(self, lat): self.lat = lat
    def get_lon(self): return self.lon
    def set_lon(self, lon): self.lon = lon
    def validate_degreesType(self, value):
        # Validate type degreesType, a restriction on xsd:decimal.
        pass
    def validate_fixType(self, value):
        # Validate type fixType, a restriction on xsd:string.
        pass
    def validate_dgpsStationType(self, value):
        # Validate type dgpsStationType, a restriction on xsd:integer.
        pass
    def hasContent_(self):
        if (
            self.ele is not None or
            self.time is not None or
            self.magvar is not None or
            self.geoidheight is not None or
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.url is not None or
            self.urlname is not None or
            self.sym is not None or
            self.type_ is not None or
            self.fix is not None or
            self.sat is not None or
            self.hdop is not None or
            self.vdop is not None or
            self.pdop is not None or
            self.ageofdgpsdata is not None or
            self.dgpsid is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='rteptType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rteptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='rteptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='rteptType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            outfile.write(' lat=%s' % (quote_attrib(self.lat), ))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            outfile.write(' lon=%s' % (quote_attrib(self.lon), ))
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='rteptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ele is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sele>%s</%sele>%s' % (namespace_, self.gds_format_float(self.ele, input_name='ele'), namespace_, eol_))
        if self.time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stime>%s</%stime>%s' % (namespace_, self.gds_format_datetime(self.time, input_name='time'), namespace_, eol_))
        if self.magvar is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smagvar>%s</%smagvar>%s' % (namespace_, self.gds_format_float(self.magvar, input_name='magvar'), namespace_, eol_))
        if self.geoidheight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoidheight>%s</%sgeoidheight>%s' % (namespace_, self.gds_format_float(self.geoidheight, input_name='geoidheight'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.cmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scmt>%s</%scmt>%s' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.src is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssrc>%s</%ssrc>%s' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.sym is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssym>%s</%ssym>%s' % (namespace_, self.gds_format_string(quote_xml(self.sym).encode(ExternalEncoding), input_name='sym'), namespace_, eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.fix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfix>%s</%sfix>%s' % (namespace_, self.gds_format_string(quote_xml(self.fix).encode(ExternalEncoding), input_name='fix'), namespace_, eol_))
        if self.sat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssat>%s</%ssat>%s' % (namespace_, self.gds_format_integer(self.sat, input_name='sat'), namespace_, eol_))
        if self.hdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shdop>%s</%shdop>%s' % (namespace_, self.gds_format_float(self.hdop, input_name='hdop'), namespace_, eol_))
        if self.vdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svdop>%s</%svdop>%s' % (namespace_, self.gds_format_float(self.vdop, input_name='vdop'), namespace_, eol_))
        if self.pdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdop>%s</%spdop>%s' % (namespace_, self.gds_format_float(self.pdop, input_name='pdop'), namespace_, eol_))
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sageofdgpsdata>%s</%sageofdgpsdata>%s' % (namespace_, self.gds_format_float(self.ageofdgpsdata, input_name='ageofdgpsdata'), namespace_, eol_))
        if self.dgpsid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdgpsid>%s</%sdgpsid>%s' % (namespace_, self.gds_format_integer(self.dgpsid, input_name='dgpsid'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='rteptType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            showIndent(outfile, level)
            outfile.write('lat=%s,\n' % (self.lat,))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            showIndent(outfile, level)
            outfile.write('lon=%s,\n' % (self.lon,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('ele=%f,\n' % self.ele)
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.time, input_name='time'))
        if self.magvar is not None:
            showIndent(outfile, level)
            outfile.write('magvar=%f,\n' % self.magvar)
        if self.geoidheight is not None:
            showIndent(outfile, level)
            outfile.write('geoidheight=%f,\n' % self.geoidheight)
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.sym is not None:
            showIndent(outfile, level)
            outfile.write('sym=%s,\n' % quote_python(self.sym).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.fix is not None:
            showIndent(outfile, level)
            outfile.write('fix=%s,\n' % quote_python(self.fix).encode(ExternalEncoding))
        if self.sat is not None:
            showIndent(outfile, level)
            outfile.write('sat=%d,\n' % self.sat)
        if self.hdop is not None:
            showIndent(outfile, level)
            outfile.write('hdop=%f,\n' % self.hdop)
        if self.vdop is not None:
            showIndent(outfile, level)
            outfile.write('vdop=%f,\n' % self.vdop)
        if self.pdop is not None:
            showIndent(outfile, level)
            outfile.write('pdop=%f,\n' % self.pdop)
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level)
            outfile.write('ageofdgpsdata=%f,\n' % self.ageofdgpsdata)
        if self.dgpsid is not None:
            showIndent(outfile, level)
            outfile.write('dgpsid=%d,\n' % self.dgpsid)
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            self.lat = value
        value = find_attr_value_('lon', node)
        if value is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            self.lon = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ele':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ele')
            self.ele = fval_
        elif nodeName_ == 'time':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.time = dval_
        elif nodeName_ == 'magvar':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'magvar')
            self.magvar = fval_
            self.validate_degreesType(self.magvar)    # validate type degreesType
        elif nodeName_ == 'geoidheight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'geoidheight')
            self.geoidheight = fval_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'sym':
            sym_ = child_.text
            sym_ = self.gds_validate_string(sym_, node, 'sym')
            self.sym = sym_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'fix':
            fix_ = child_.text
            fix_ = self.gds_validate_string(fix_, node, 'fix')
            self.fix = fix_
            self.validate_fixType(self.fix)    # validate type fixType
        elif nodeName_ == 'sat':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'sat')
            self.sat = ival_
        elif nodeName_ == 'hdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'hdop')
            self.hdop = fval_
        elif nodeName_ == 'vdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vdop')
            self.vdop = fval_
        elif nodeName_ == 'pdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'pdop')
            self.pdop = fval_
        elif nodeName_ == 'ageofdgpsdata':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ageofdgpsdata')
            self.ageofdgpsdata = fval_
        elif nodeName_ == 'dgpsid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'dgpsid')
            self.dgpsid = ival_
            self.validate_dgpsStationType(self.dgpsid)    # validate type dgpsStationType
        else:
            obj_ = self.gds_build_any(child_, 'rteptType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class rteptType


class trkType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, cmt=None, desc=None, src=None, url=None, urlname=None, number=None, anytypeobjs_=None, trkseg=None):
        self.original_tagname_ = None
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        self.url = url
        self.urlname = urlname
        self.number = number
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        if trkseg is None:
            self.trkseg = []
        else:
            self.trkseg = trkseg
    def factory(*args_, **kwargs_):
        if trkType.subclass:
            return trkType.subclass(*args_, **kwargs_)
        else:
            return trkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_trkseg(self): return self.trkseg
    def set_trkseg(self, trkseg): self.trkseg = trkseg
    def add_trkseg(self, value): self.trkseg.append(value)
    def insert_trkseg(self, index, value): self.trkseg[index] = value
    def hasContent_(self):
        if (
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.url is not None or
            self.urlname is not None or
            self.number is not None or
            self.anytypeobjs_ or
            self.trkseg
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='trkType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='trkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='trkType'):
        pass
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='trkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.cmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scmt>%s</%scmt>%s' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.src is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssrc>%s</%ssrc>%s' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespace_, self.gds_format_integer(self.number, input_name='number'), namespace_, eol_))
        for trkseg_ in self.trkseg:
            trkseg_.export(outfile, level, namespace_, name_='trkseg', pretty_print=pretty_print)
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trkType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%d,\n' % self.number)
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('trkseg=[\n')
        level += 1
        for trkseg_ in self.trkseg:
            showIndent(outfile, level)
            outfile.write('model_.trksegType(\n')
            trkseg_.exportLiteral(outfile, level, name_='trksegType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'number':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'number')
            self.number = ival_
        elif nodeName_ == 'trkseg':
            obj_ = trksegType.factory()
            obj_.build(child_)
            self.trkseg.append(obj_)
            obj_.original_tagname_ = 'trkseg'
        else:
            obj_ = self.gds_build_any(child_, 'trkType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class trkType


class trksegType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, trkpt=None):
        self.original_tagname_ = None
        if trkpt is None:
            self.trkpt = []
        else:
            self.trkpt = trkpt
    def factory(*args_, **kwargs_):
        if trksegType.subclass:
            return trksegType.subclass(*args_, **kwargs_)
        else:
            return trksegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_trkpt(self): return self.trkpt
    def set_trkpt(self, trkpt): self.trkpt = trkpt
    def add_trkpt(self, value): self.trkpt.append(value)
    def insert_trkpt(self, index, value): self.trkpt[index] = value
    def hasContent_(self):
        if (
            self.trkpt
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='trksegType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trksegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='trksegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='trksegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='trksegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for trkpt_ in self.trkpt:
            trkpt_.export(outfile, level, namespace_, name_='trkpt', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trksegType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('trkpt=[\n')
        level += 1
        for trkpt_ in self.trkpt:
            showIndent(outfile, level)
            outfile.write('model_.trkptType(\n')
            trkpt_.exportLiteral(outfile, level, name_='trkptType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'trkpt':
            obj_ = trkptType.factory()
            obj_.build(child_)
            self.trkpt.append(obj_)
            obj_.original_tagname_ = 'trkpt'
# end class trksegType


class trkptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lat=None, lon=None, ele=None, time=None, course=None, speed=None, magvar=None, geoidheight=None, name=None, cmt=None, desc=None, src=None, url=None, urlname=None, sym=None, type_=None, fix=None, sat=None, hdop=None, vdop=None, pdop=None, ageofdgpsdata=None, dgpsid=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.lat = _cast(None, lat)
        self.lon = _cast(None, lon)
        self.ele = ele
        if isinstance(time, basestring):
            initvalue_ = datetime_.datetime.strptime(time, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = time
        self.time = initvalue_
        self.course = course
        self.speed = speed
        self.magvar = magvar
        self.geoidheight = geoidheight
        self.name = name
        self.cmt = cmt
        self.desc = desc
        self.src = src
        self.url = url
        self.urlname = urlname
        self.sym = sym
        self.type_ = type_
        self.fix = fix
        self.sat = sat
        self.hdop = hdop
        self.vdop = vdop
        self.pdop = pdop
        self.ageofdgpsdata = ageofdgpsdata
        self.dgpsid = dgpsid
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if trkptType.subclass:
            return trkptType.subclass(*args_, **kwargs_)
        else:
            return trkptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ele(self): return self.ele
    def set_ele(self, ele): self.ele = ele
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_course(self): return self.course
    def set_course(self, course): self.course = course
    def get_speed(self): return self.speed
    def set_speed(self, speed): self.speed = speed
    def get_magvar(self): return self.magvar
    def set_magvar(self, magvar): self.magvar = magvar
    def get_geoidheight(self): return self.geoidheight
    def set_geoidheight(self, geoidheight): self.geoidheight = geoidheight
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_cmt(self): return self.cmt
    def set_cmt(self, cmt): self.cmt = cmt
    def get_desc(self): return self.desc
    def set_desc(self, desc): self.desc = desc
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_urlname(self): return self.urlname
    def set_urlname(self, urlname): self.urlname = urlname
    def get_sym(self): return self.sym
    def set_sym(self, sym): self.sym = sym
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_fix(self): return self.fix
    def set_fix(self, fix): self.fix = fix
    def get_sat(self): return self.sat
    def set_sat(self, sat): self.sat = sat
    def get_hdop(self): return self.hdop
    def set_hdop(self, hdop): self.hdop = hdop
    def get_vdop(self): return self.vdop
    def set_vdop(self, vdop): self.vdop = vdop
    def get_pdop(self): return self.pdop
    def set_pdop(self, pdop): self.pdop = pdop
    def get_ageofdgpsdata(self): return self.ageofdgpsdata
    def set_ageofdgpsdata(self, ageofdgpsdata): self.ageofdgpsdata = ageofdgpsdata
    def get_dgpsid(self): return self.dgpsid
    def set_dgpsid(self, dgpsid): self.dgpsid = dgpsid
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_lat(self): return self.lat
    def set_lat(self, lat): self.lat = lat
    def get_lon(self): return self.lon
    def set_lon(self, lon): self.lon = lon
    def validate_degreesType(self, value):
        # Validate type degreesType, a restriction on xsd:decimal.
        pass
    def validate_fixType(self, value):
        # Validate type fixType, a restriction on xsd:string.
        pass
    def validate_dgpsStationType(self, value):
        # Validate type dgpsStationType, a restriction on xsd:integer.
        pass
    def hasContent_(self):
        if (
            self.ele is not None or
            self.time is not None or
            self.course is not None or
            self.speed is not None or
            self.magvar is not None or
            self.geoidheight is not None or
            self.name is not None or
            self.cmt is not None or
            self.desc is not None or
            self.src is not None or
            self.url is not None or
            self.urlname is not None or
            self.sym is not None or
            self.type_ is not None or
            self.fix is not None or
            self.sat is not None or
            self.hdop is not None or
            self.vdop is not None or
            self.pdop is not None or
            self.ageofdgpsdata is not None or
            self.dgpsid is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='gpx:', name_='trkptType', namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trkptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='gpx:', name_='trkptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='gpx:', name_='trkptType'):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            outfile.write(' lat=%s' % (quote_attrib(self.lat), ))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            outfile.write(' lon=%s' % (quote_attrib(self.lon), ))
    def exportChildren(self, outfile, level, namespace_='gpx:', name_='trkptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ele is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sele>%s</%sele>%s' % (namespace_, self.gds_format_float(self.ele, input_name='ele'), namespace_, eol_))
        if self.time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stime>%s</%stime>%s' % (namespace_, self.gds_format_datetime(self.time, input_name='time'), namespace_, eol_))
        if self.course is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scourse>%s</%scourse>%s' % (namespace_, self.gds_format_float(self.course, input_name='course'), namespace_, eol_))
        if self.speed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sspeed>%s</%sspeed>%s' % (namespace_, self.gds_format_float(self.speed, input_name='speed'), namespace_, eol_))
        if self.magvar is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smagvar>%s</%smagvar>%s' % (namespace_, self.gds_format_float(self.magvar, input_name='magvar'), namespace_, eol_))
        if self.geoidheight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoidheight>%s</%sgeoidheight>%s' % (namespace_, self.gds_format_float(self.geoidheight, input_name='geoidheight'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.cmt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scmt>%s</%scmt>%s' % (namespace_, self.gds_format_string(quote_xml(self.cmt).encode(ExternalEncoding), input_name='cmt'), namespace_, eol_))
        if self.desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdesc>%s</%sdesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.desc).encode(ExternalEncoding), input_name='desc'), namespace_, eol_))
        if self.src is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssrc>%s</%ssrc>%s' % (namespace_, self.gds_format_string(quote_xml(self.src).encode(ExternalEncoding), input_name='src'), namespace_, eol_))
        if self.url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surl>%s</%surl>%s' % (namespace_, self.gds_format_string(quote_xml(self.url).encode(ExternalEncoding), input_name='url'), namespace_, eol_))
        if self.urlname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%surlname>%s</%surlname>%s' % (namespace_, self.gds_format_string(quote_xml(self.urlname).encode(ExternalEncoding), input_name='urlname'), namespace_, eol_))
        if self.sym is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssym>%s</%ssym>%s' % (namespace_, self.gds_format_string(quote_xml(self.sym).encode(ExternalEncoding), input_name='sym'), namespace_, eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.fix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfix>%s</%sfix>%s' % (namespace_, self.gds_format_string(quote_xml(self.fix).encode(ExternalEncoding), input_name='fix'), namespace_, eol_))
        if self.sat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssat>%s</%ssat>%s' % (namespace_, self.gds_format_integer(self.sat, input_name='sat'), namespace_, eol_))
        if self.hdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shdop>%s</%shdop>%s' % (namespace_, self.gds_format_float(self.hdop, input_name='hdop'), namespace_, eol_))
        if self.vdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svdop>%s</%svdop>%s' % (namespace_, self.gds_format_float(self.vdop, input_name='vdop'), namespace_, eol_))
        if self.pdop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdop>%s</%spdop>%s' % (namespace_, self.gds_format_float(self.pdop, input_name='pdop'), namespace_, eol_))
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sageofdgpsdata>%s</%sageofdgpsdata>%s' % (namespace_, self.gds_format_float(self.ageofdgpsdata, input_name='ageofdgpsdata'), namespace_, eol_))
        if self.dgpsid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdgpsid>%s</%sdgpsid>%s' % (namespace_, self.gds_format_integer(self.dgpsid, input_name='dgpsid'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trkptType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lat is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            showIndent(outfile, level)
            outfile.write('lat=%s,\n' % (self.lat,))
        if self.lon is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            showIndent(outfile, level)
            outfile.write('lon=%s,\n' % (self.lon,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ele is not None:
            showIndent(outfile, level)
            outfile.write('ele=%f,\n' % self.ele)
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.time, input_name='time'))
        if self.course is not None:
            showIndent(outfile, level)
            outfile.write('course=%f,\n' % self.course)
        if self.speed is not None:
            showIndent(outfile, level)
            outfile.write('speed=%f,\n' % self.speed)
        if self.magvar is not None:
            showIndent(outfile, level)
            outfile.write('magvar=%f,\n' % self.magvar)
        if self.geoidheight is not None:
            showIndent(outfile, level)
            outfile.write('geoidheight=%f,\n' % self.geoidheight)
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.cmt is not None:
            showIndent(outfile, level)
            outfile.write('cmt=%s,\n' % quote_python(self.cmt).encode(ExternalEncoding))
        if self.desc is not None:
            showIndent(outfile, level)
            outfile.write('desc=%s,\n' % quote_python(self.desc).encode(ExternalEncoding))
        if self.src is not None:
            showIndent(outfile, level)
            outfile.write('src=%s,\n' % quote_python(self.src).encode(ExternalEncoding))
        if self.url is not None:
            showIndent(outfile, level)
            outfile.write('url=%s,\n' % quote_python(self.url).encode(ExternalEncoding))
        if self.urlname is not None:
            showIndent(outfile, level)
            outfile.write('urlname=%s,\n' % quote_python(self.urlname).encode(ExternalEncoding))
        if self.sym is not None:
            showIndent(outfile, level)
            outfile.write('sym=%s,\n' % quote_python(self.sym).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.fix is not None:
            showIndent(outfile, level)
            outfile.write('fix=%s,\n' % quote_python(self.fix).encode(ExternalEncoding))
        if self.sat is not None:
            showIndent(outfile, level)
            outfile.write('sat=%d,\n' % self.sat)
        if self.hdop is not None:
            showIndent(outfile, level)
            outfile.write('hdop=%f,\n' % self.hdop)
        if self.vdop is not None:
            showIndent(outfile, level)
            outfile.write('vdop=%f,\n' % self.vdop)
        if self.pdop is not None:
            showIndent(outfile, level)
            outfile.write('pdop=%f,\n' % self.pdop)
        if self.ageofdgpsdata is not None:
            showIndent(outfile, level)
            outfile.write('ageofdgpsdata=%f,\n' % self.ageofdgpsdata)
        if self.dgpsid is not None:
            showIndent(outfile, level)
            outfile.write('dgpsid=%d,\n' % self.dgpsid)
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lat', node)
        if value is not None and 'lat' not in already_processed:
            already_processed.add('lat')
            self.lat = value
        value = find_attr_value_('lon', node)
        if value is not None and 'lon' not in already_processed:
            already_processed.add('lon')
            self.lon = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ele':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ele')
            self.ele = fval_
        elif nodeName_ == 'time':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.time = dval_
        elif nodeName_ == 'course':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'course')
            self.course = fval_
            self.validate_degreesType(self.course)    # validate type degreesType
        elif nodeName_ == 'speed':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'speed')
            self.speed = fval_
        elif nodeName_ == 'magvar':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'magvar')
            self.magvar = fval_
            self.validate_degreesType(self.magvar)    # validate type degreesType
        elif nodeName_ == 'geoidheight':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'geoidheight')
            self.geoidheight = fval_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'cmt':
            cmt_ = child_.text
            cmt_ = self.gds_validate_string(cmt_, node, 'cmt')
            self.cmt = cmt_
        elif nodeName_ == 'desc':
            desc_ = child_.text
            desc_ = self.gds_validate_string(desc_, node, 'desc')
            self.desc = desc_
        elif nodeName_ == 'src':
            src_ = child_.text
            src_ = self.gds_validate_string(src_, node, 'src')
            self.src = src_
        elif nodeName_ == 'url':
            url_ = child_.text
            url_ = self.gds_validate_string(url_, node, 'url')
            self.url = url_
        elif nodeName_ == 'urlname':
            urlname_ = child_.text
            urlname_ = self.gds_validate_string(urlname_, node, 'urlname')
            self.urlname = urlname_
        elif nodeName_ == 'sym':
            sym_ = child_.text
            sym_ = self.gds_validate_string(sym_, node, 'sym')
            self.sym = sym_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'fix':
            fix_ = child_.text
            fix_ = self.gds_validate_string(fix_, node, 'fix')
            self.fix = fix_
            self.validate_fixType(self.fix)    # validate type fixType
        elif nodeName_ == 'sat':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'sat')
            self.sat = ival_
        elif nodeName_ == 'hdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'hdop')
            self.hdop = fval_
        elif nodeName_ == 'vdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vdop')
            self.vdop = fval_
        elif nodeName_ == 'pdop':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'pdop')
            self.pdop = fval_
        elif nodeName_ == 'ageofdgpsdata':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ageofdgpsdata')
            self.ageofdgpsdata = fval_
        elif nodeName_ == 'dgpsid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'dgpsid')
            self.dgpsid = ival_
            self.validate_dgpsStationType(self.dgpsid)    # validate type dgpsStationType
        else:
            obj_ = self.gds_build_any(child_, 'trkptType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class trkptType


GDSClassesMapping = {
    'rte': rteType,
    'trk': trkType,
    'wpt': wptType,
    'bounds': boundsType,
    'trkpt': trkptType,
    'rtept': rteptType,
    'trkseg': trksegType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpx
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpx
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpx
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:gpx="http://www.topografix.com/GPX/1/0"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'gpx'
        rootClass = gpx
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from gpx10 import *\n\n')
        sys.stdout.write('import gpx10 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "boundsType",
    "gpx",
    "rteType",
    "rteptType",
    "trkType",
    "trkptType",
    "trksegType",
    "wptType"
]
